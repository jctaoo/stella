---
import MainLayout from "@/layouts/Main.astro";
import { getCollection } from "astro:content";
import { z } from "astro:schema";
import { Badge } from "@/components/ui/badge";
import ContentFilterButton from "@/components/content-filter-button";
import { getLastModified } from "@/utils/lastModified";
import { isLooseEqual } from "@/utils/string";
import { Tag } from "lucide-react"; 
import IndicatorText from "@/components/indicator-text";

export const prerender = false;

const paramsSchema = z.object({
  category: z.string().optional(),
  tags: z
    .string()
    .transform((val) => val.split(","))
    .pipe(z.array(z.string()))
    .optional(),
});
const params = paramsSchema.parse(Object.fromEntries(Astro.url.searchParams));

const posts = await getCollection("posts", ({ data }) => {
  const categoryOk = params.category ? isLooseEqual(data.category, params.category) : true;
  const tagsOk = params.tags
    ? params.tags.every((tag) => {
        return data.tags?.some((t) => isLooseEqual(t, tag));
      })
    : true;
  return categoryOk && tagsOk;
});
const pageTitle = "Posts";

// Build filter options from all posts (unfiltered)
const allPosts = await getCollection("posts");
const allCategories = Array.from(new Set(allPosts.map((p) => p.data.category).filter(Boolean) as string[]));
const allTags = Array.from(
  new Set(allPosts.flatMap((p) => (p.data.tags ? (p.data.tags as string[]) : [])).filter(Boolean) as string[]),
);
---

<MainLayout header={{ title: pageTitle }}>
  <div class="min-h-screen bg-background">
    <div class="container mx-auto max-w-4xl p-6 md:p-12 space-y-8 pt-16 md:pt-12">
      <header class="space-y-2">
        <div class="pt-2">
          <ContentFilterButton
            client:idle
            categories={allCategories}
            tags={allTags}
            selectedCategory={params.category}
            selectedTags={params.tags}
          />
        </div>
      </header>

      <div class="space-y-6">
        {
          posts.map((post) => (
            <article class="group">
              <a
                href={`/posts/${post.slug}/`}
                class="block space-y-3 p-6 -mx-6 rounded-lg hover:bg-muted/50 transition-colors"
              >
                <header class="space-y-2">
                  <div class="flex items-center gap-2">
                    {post.data.category && (
                      <Badge variant="secondary" className="text-xs">
                        {post.data.category}
                      </Badge>
                    )}
                  </div>
                  <h2 class="text-xl font-medium text-foreground group-hover:text-primary transition-colors">
                    <IndicatorText active interactiveIndicator>{post.data.title}</IndicatorText>
                  </h2>
                </header>

                {post.data.abbr && <p class="text-muted-foreground text-sm leading-relaxed">{post.data.abbr}</p>}

                <footer class="text-xs text-muted-foreground flex items-center gap-3 flex-wrap">
                  <span class="inline-flex items-center gap-1">{getLastModified(post)}</span>

                  {post.data.tags?.map((tag) => (
                    <Badge variant="secondary">
                      <Tag className="size-3" />
                      {tag}
                    </Badge>
                  ))}
                </footer>
              </a>
            </article>
          ))
        }
      </div>
    </div>
  </div>
</MainLayout>
