---
import MainLayout from "@/layouts/Main.astro";
import { getCollection, type CollectionEntry, type InferEntrySchema, type Render, type RenderedContent } from "astro:content";
import { Card, CardHeader, CardTitle, CardContent, CardDescription, CardFooter } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { getLastModified } from "@/utils/lastModified";
import { z } from "astro:schema";
import { isLooseEqual } from "@/utils/string";
import ContentFilterButton from "@/components/content-filter-button";
import IndicatorText from "@/components/indicator-text";
import { Tag } from "lucide-react";

export const prerender = false;
const paramsSchema = z.object({
  category: z.string().optional(),
  tags: z.string().transform((val) => val.split(",")).pipe(z.array(z.string())).optional(),
});
const params = paramsSchema.parse(Object.fromEntries(Astro.url.searchParams));

const snippets = await getCollection("snippets", ({ data }) => {
  const categoryOk = params.category ? isLooseEqual(data.category, params.category) : true;
  const tagsOk = params.tags
    ? params.tags.every((tag) => {
        return data.tags?.some((t) => isLooseEqual(t, tag));
      })
    : true;
  return categoryOk && tagsOk;
});
const pageTitle = "Snippets";

// Build filter options from all snippets
const allSnippets = await getCollection("snippets");
const allCategories = Array.from(
  new Set(allSnippets.map((s) => s.data.category).filter(Boolean) as string[])
);
const allTags = Array.from(
  new Set(
    allSnippets
      .flatMap((s) => (s.data.tags ? (s.data.tags as string[]) : []))
      .filter(Boolean) as string[]
  )
);
---

<MainLayout header={{ title: pageTitle }}>
  <div class="min-h-screen bg-background">
    <div class="container mx-auto max-w-4xl p-6 md:p-12 space-y-8 pt-6 md:pt-12">
      <header class="space-y-2">
        <div class="pt-2">
          <ContentFilterButton
            client:load
            categories={allCategories}
            tags={allTags}
            selectedCategory={params.category}
            selectedTags={params.tags}
          />
        </div>
      </header>
      
      <div class="space-y-6">
        {
          snippets.map((snip) => (
            <article class="group">
              <a href={`/snippets/${snip.slug}/`} class="block space-y-3 p-6 -mx-6 rounded-lg hover:bg-muted/50 transition-colors">
                <header class="space-y-2">
                  <div class="flex items-center gap-2">
                    {snip.data.category && (
                      <Badge variant="secondary" className="text-xs">
                        {snip.data.category}
                      </Badge>
                    )}
                  </div>
                  <h2 class="text-xl font-medium text-foreground group-hover:text-primary transition-colors">
                    <IndicatorText active interactiveIndicator>{snip.data.title}</IndicatorText>
                  </h2>
                </header>

                {snip.data.description && <p class="text-muted-foreground text-sm leading-relaxed">{snip.data.description}</p>}
                
                <footer class="text-xs text-muted-foreground flex items-center gap-3 flex-wrap">
                  <span class="inline-flex items-center gap-1">
                    {getLastModified(snip)}
                  </span>

                  {snip.data.tags?.map((tag) => (
                    <Badge variant="secondary">
                      <Tag className="size-3" />
                      {tag}
                    </Badge>
                  ))}
                </footer>
              </a>
            </article>
          ))
        }
      </div>
    </div>
  </div>
</MainLayout>
